# proxychains.conf  VER 4.x
#
#        HTTP, SOCKS4a, SOCKS5 tunneling proxifier with DNS.


# The option below identifies how the ProxyList is treated.
# only one option should be uncommented at time,
# otherwise the last appearing option will be accepted
#dynamic_chain

# Dynamic - Each connection will be done via chained proxies
# all proxies chained in the order as they appear in the list
# at least one proxy must be online to play in chain
# (dead proxies are skipped)
# otherwise EINTR is returned to the app
#strict_chain

# Strict - Each connection will be done via chained proxies
# all proxies chained in the order as they appear in the list
# all proxies must be online to play in chain
# otherwise EINTR is returned to the app
round_robin_chain

# Round Robin - Each connection will be done via chained proxies
# of chain_len length
# all proxies chained in the order as they appear in the list
# at least one proxy must be online to play in chain
# (dead proxies are skipped).
# the start of the current proxy chain is the proxy after the last
# proxy in the previously invoked proxy chain.
# if the end of the proxy chain is reached while looking for proxies
# start at the beginning again.
# otherwise EINTR is returned to the app
# These semantics are not guaranteed in a multithreaded environment.
#random_chain

# Random - Each connection will be done via random proxy
# (or proxy chain, see  chain_len) from the list.
# this option is good to test your IDS :)

# Make sense only if random_chain or round_robin_chain
chain_len = 2

# Quiet mode (no output from library)
#quiet_mode

## Proxy DNS requests - no leak for DNS data
# (disable all of the 3 items below to not proxy your DNS requests)

# method 1. this uses the proxychains4 style method to do remote dns:
# a thread is spawned that serves DNS requests and hands down an ip
# assigned from an internal list (via remote_dns_subnet).
# this is the easiest (setup-wise) and fastest method, however on
# systems with buggy libcs and very complex software like webbrowsers
# this might not work and/or cause crashes.
proxy_dns

# method 2. use the old proxyresolv script to proxy DNS requests
# in proxychains 3.1 style. requires `proxyresolv` in $PATH
# plus a dynamically linked `dig` binary.
# this is a lot slower than `proxy_dns`, doesn't support .onion URLs,
# but might be more compatible with complex software like webbrowsers.
#proxy_dns_old

# method 3. use proxychains4-daemon process to serve remote DNS requests.
# this is similar to the threaded `proxy_dns` method, however it requires
# that proxychains4-daemon is already running on the specified address.
# on the plus side it doesn't do malloc/threads so it should be quite
# compatible with complex, async-unsafe software.
# note that if you don't start proxychains4-daemon before using this,
# the process will simply hang.
#proxy_dns_daemon 127.0.0.1:1053

# set the class A subnet number to use for the internal remote DNS mapping
# we use the reserved 224.x.x.x range by default,
# if the proxified app does a DNS request, we will return an IP from that range.
# on further accesses to this ip we will send the saved DNS name to the proxy.
# in case some control-freak app checks the returned ip, and denies to
# connect, you can use another subnet, e.g. 10.x.x.x or 127.x.x.x.
# of course you should make sure that the proxified app does not need
# *real* access to this subnet.
# i.e. dont use the same subnet then in the localnet section
#remote_dns_subnet 127
#remote_dns_subnet 10
remote_dns_subnet 224

# Some timeouts in milliseconds
tcp_read_time_out 15000
tcp_connect_time_out 8000

### Examples for localnet exclusion
## localnet ranges will *not* use a proxy to connect.
## note that localnet works only when plain IP addresses are passed to the app,
## the hostname resolves via /etc/hosts, or proxy_dns is disabled or proxy_dns_old used.

## Exclude connections to 192.168.1.0/24 with port 80
# localnet 192.168.1.0:80/255.255.255.0

## Exclude connections to 192.168.100.0/24
# localnet 192.168.100.0/255.255.255.0

## Exclude connections to ANYwhere with port 80
# localnet 0.0.0.0:80/0.0.0.0
# localnet [::]:80/0

## RFC6890 Loopback address range
## if you enable this, you have to make sure remote_dns_subnet is not 127
## you'll need to enable it if you want to use an application that
## connects to localhost.
localnet 127.0.0.0/255.0.0.0
localnet ::1/128

## RFC1918 Private Address Ranges
# localnet 10.0.0.0/255.0.0.0
# localnet 172.16.0.0/255.240.0.0
# localnet 192.168.0.0/255.255.0.0

### Examples for dnat
## Trying to proxy connections to destinations which are dnatted,
## will result in proxying connections to the new given destinations.
## Whenever I connect to 1.1.1.1 on port 1234 actually connect to 1.1.1.2 on port 443
# dnat 1.1.1.1:1234  1.1.1.2:443

## Whenever I connect to 1.1.1.1 on port 443 actually connect to 1.1.1.2 on port 443
## (no need to write :443 again)
# dnat 1.1.1.2:443  1.1.1.2

## No matter what port I connect to on 1.1.1.1 port actually connect to 1.1.1.2 on port 443
# dnat 1.1.1.1  1.1.1.2:443

## Always, instead of connecting to 1.1.1.1, connect to 1.1.1.2
# dnat 1.1.1.1  1.1.1.2


# ProxyList format
#       type  ip  port [user pass]
#       (values separated by 'tab' or 'blank')
#
#       only numeric ipv4 addresses are valid
#
#
#        Examples:
#
#            	socks5	192.168.67.78	1080	lamer	secret
#		http	192.168.89.3	8080	justu	hidden
#	 	socks4	192.168.1.49	1080
#	        http	192.168.39.93	8080
#
#
#       proxy types: http, socks4, socks5, raw
#         * raw: The traffic is simply forwarded to the proxy without modification.
#        ( auth types supported: "basic"-http  "user/pass"-socks )
#
# add proxy here ...

[ProxyList]
# SOCKS4 Proxies
socks4 103.88.221.194 46450
socks4 50.207.130.238 54321
socks4 181.48.63.206 4153
socks4 185.87.121.35 8975
socks4 54.38.163.25 5678
socks4 185.181.43.235 1080
socks4 212.126.5.246 42344
socks4 93.159.189.154 4153
socks4 198.8.94.170 4145
socks4 192.111.135.17 18302
socks4 45.135.235.132 5678
socks4 185.89.156.130 5678
socks4 202.141.242.3 55544
socks4 46.98.191.242 5678
socks4 192.252.209.155 14455
socks4 176.58.20.226 4153
socks4 5.44.254.40 4145
socks4 93.117.72.27 55770
socks4 149.20.253.75 12551
socks4 80.232.253.108 4153
socks4 74.119.147.209 4145
socks4 38.133.200.94 31596
socks4 95.31.42.199 3629
socks4 2.137.16.247 4153
socks4 77.242.233.13 4153
socks4 149.3.30.3 4153
socks4 212.156.86.130 4145
socks4 192.111.135.18 18301
socks4 178.48.68.61 4145
socks4 38.48.123.55 45698
socks4 173.212.250.65 53851
socks4 155.254.9.2 36510
socks4 194.67.118.152 8193
socks4 203.130.18.122 45919
socks4 103.134.239.210 5678
socks4 192.252.208.70 14282
socks4 93.178.201.231 52281
socks4 87.121.49.238 4145
socks4 80.25.87.49 57082
socks4 70.185.95.177 39593
socks4 198.8.94.174 39078
socks4 195.96.81.238 39586
socks4 89.39.114.31 4153
socks4 217.144.106.102 135
socks4 212.200.149.242 5678
socks4 193.59.26.208 4153
socks4 178.212.55.61 1080
socks4 188.68.59.89 1080
socks4 185.189.208.65 4153
socks4 197.255.253.33 5678
socks4 178.212.52.198 1080
socks4 95.31.35.210 3629
socks4 89.216.52.217 4153
socks4 102.219.33.110 1080

#SOCKS5 Proxies
socks5 51.255.219.244 7497
socks5 75.119.159.58 7497
socks5 81.143.236.200 443
socks5 157.245.247.84 7497
socks5 68.183.210.1 7497
socks5 68.183.219.54 7497
socks5 161.35.125.167 7497
socks5 68.183.22.43 7497
socks5 194.163.160.116 7497
socks5 95.111.228.165 7497
socks5 51.222.146.133 7497
socks5 165.22.204.32 7497
socks5 85.105.15.126 8111
socks5 95.68.225.138 1080
socks5 137.118.147.111 8111
socks5 183.166.145.36 38801
socks5 173.246.28.107 8111

# HTTP Proxies
http 144.217.197.151 47134
http 107.161.190.50 8081
http 74.119.147.209 4145
http 50.199.46.20 32100
http 50.250.56.129 48380
http 66.208.78.162 8111
http 198.8.94.174 39078
http 162.55.95.166 8888
http 192.111.139.163 19404
http 192.111.139.165 4145
http 66.208.78.101 8111
http 64.40.228.50 80
http 50.237.98.81 1080
http 192.111.137.35 4145
http 76.26.114.253 39593
http 38.133.200.94 31596
http 164.92.160.38 8080
http 66.94.113.79 3128

# meanwile
# defaults set to "tor"
socks4 	127.0.0.1 9050
